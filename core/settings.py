"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import sys

from dotenv import load_dotenv
from pathlib import Path
from corsheaders.defaults import default_headers


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')
STATIC_DIR=os.path.join(BASE_DIR,'static')
BASE_DIR = Path(__file__).resolve().parent.parent


 


# Adicionar essa tag para que nosso projeto encontre o .env
load_dotenv(os.path.join(BASE_DIR, ".env")) 

# Diz para Projeto Django aonde estão nossos aplicativos
APPS_DIR = str(os.path.join(BASE_DIR,'apps')) # Dentro da pasta apps na raiz do projeto
sys.path.insert(0, APPS_DIR)



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True


# QUANDO VC VER ASSIM ['*']  VOCE ESTA PERMITINDO TODOS E NAO É LEGAL
ALLOWED_HOSTS = [
        'localhost', 
	    '127.0.0.1',
]


# CORS Config  indica que a configuração a seguir está relacionada ao CORS (Cross-Origin Resource Sharing).
#CORS_ALLOW_HEADERS:
# Esta é uma configuração usada para especificar quais cabeçalhos 
# HTTP são permitidos em solicitações CORS. CORS é uma política de 
# segurança que permite que recursos de um domínio sejam acessados por outro domínio.

CORS_ALLOW_HEADERS = list(default_headers) + [
    # ['X-Register']:
    # Esta parte adiciona o cabeçalho personalizado 'X-Register' à lista de cabeçalhos permitidos. 
    # O operador + concatena a lista default_headers com a lista ['X-Register'].
 	'X-Register',
] 

# list(default_headers):
# default_headers é uma lista padrão de cabeçalhos permitidos. A função list() 
# é usada para garantir que default_headers seja uma lista, caso não seja.

# Resumo A linha de código está configurando a lista de cabeçalhos permitidos 
# para solicitações CORS, incluindo todos os cabeçalhos padrão e adicionando um 
# cabeçalho personalizado chamado 'X-Register'. Isso é útil quando você precisa 
# permitir cabeçalhos específicos que não estão incluídos na lista padrão





CORS_ORIGIN_ALLOW_ALL = True  
# CORS_ORIGIN_ALLOW_ALL como True, o que permite que qualquer site acesse seus recursos.
# Defina como False e adicione o site no CORS_ORIGIN_WHITELIST onde somente o site da lista acesse os seus recursos.



CORS_ALLOW_CREDENTIALS = False 


CORS_ORIGIN_WHITELIST = ['http://meusite.com',] # Lista. 



if not DEBUG:
	SECURE_SSL_REDIRECT = True
	ADMINS = [(os.getenv('SUPER_USER'), os.getenv('EMAIL'))]
	SESSION_COOKIE_SECURE = True
	CSRF_COOKIE_SECURE = True 

# explicacao abaixar do codigo if not DEBUG:
# if not DEBUG: verifica se a aplicação está sendo executada em modo de depuração (DEBUG=True).
# Se DEBUG for False, isso significa que a aplicação está sendo executada em um ambiente de 
# produção, portanto, as configurações de segurança devem ser aplicadas.

# SECURE_SSL_REDIRECT direciona todas as solicitações HTTP para HTTPS.

# ADMINS é uma lista de tuplas que contêm informações sobre os administradores do site. 
# Se ocorrer um erro no site, um email será enviado para os endereços listados em ADMINS.

# SESSION_COOKIE_SECURE garante que os cookies de sessão sejam definidos apenas em conexões HTTPS.

# CSRF_COOKIE_SECURE garante que os cookies CSRF sejam definidos apenas em conexões HTTPS.

# Essas configurações ajudam a proteger a aplicação contra ataques de interceptação e garantem
# que as informações confidenciais do usuário sejam mantidas seguras.

# Com essas configurações, você permitirá que o site "http://meusite.com" acesse seus recursos. 
# É importante lembrar que, para que isso funcione, o site que está acessando seus recursos 
# também deve ter a configuração CORS correta.



# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]


THIRD_APPS = [ # são as Lib/app que instalamos no projeto
    #... # update 11/03/2024 - removido esses ...
    "corsheaders",
]

PROJECT_APPS = [ # são os apps que criamos no projeto 
        # 'apps.base',		# update 11/03/2024
        # 'apps.myapp',   # Removido esses apps que nao criamos ainda.
]

# INSTALLED_APPS é a variavel que django entende para fazer a leitura \
# dos aplicativos então verifica a nomencratura.
INSTALLED_APPS = DJANGO_APPS + THIRD_APPS + PROJECT_APPS




MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # CORS
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'requestlogs.middleware.RequestLogsMiddleware',  # LOGS
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Banco de Dados.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, os.getenv('NAME_DB')),
            #'USER':os.getenv('USER_DB')
            #'PASSWORD': os.getenv('PASSWORD_DB')
            #'HOST':os.getenv('HOST_DB')
            #'PORT':os.getenv('PORT_DB') 
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



REST_FRAMEWORK={ 
    'EXCEPTION_HANDLER': 'requestlogs.views.exception_handler',
}


# Configuração padrão de Logs 
LOGGING = { # update 03/11/2024 
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'requestlogs_to_file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'info.log',
            'when': 'midnight',  # Rotaciona a cada meia-noite
            'backupCount': 7,  # Mantém logs dos últimos 7 dias
            'formatter': 'verbose',  # Configuração de formatação
        },
    },
    'loggers': {
        'requestlogs': {
            'handlers': ['requestlogs_to_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
    },
}
"""
 # Configuração padrão de Logs 
LOGGING =               
No Django (e no Python em geral), os níveis de log disponíveis são:

    DEBUG: Para informações detalhadas, geralmente usadas para depuração. Esse nível inclui praticamente tudo.
    INFO: Para informações gerais sobre o funcionamento normal do sistema. Esse nível é bom para acompanhar operações comuns, sem muitos detalhes.
    WARNING: Para situações incomuns que não são erros, mas podem exigir atenção.
    ERROR: Para erros que impedem uma operação específica, mas não interrompem o sistema como um todo.
    CRITICAL: Para erros graves que podem exigir intervenção imediata.

No seu caso, com level: 'INFO', o sistema registrará mensagens de INFO, WARNING, ERROR e CRITICAL.

Se você quer menos logs, use WARNING ou superior; se quer mais detalhes, use DEBUG.             
                
"""





REQUESTLOGS = {
    'SECRETS': ['password', 'token'],
    'METHODS': ('PUT', 'PATCH', 'POST', 'DELETE'),
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/ 
# Se quiser deixar em PT BR
LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/ 
STATIC_ROOT = os.path.join(BASE_DIR,'static')
STATIC_URL = '/static/'

# STATICFILES_DIRS = [ # talvez em Produção podesse usar assim.
#     BASE_DIR / 'static',
# ]

MEDIA_ROOT=os.path.join(BASE_DIR,'media')
MEDIA_URL = '/media/'




# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Configuração de E-mail
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') 
EMAIL_PORT = os.getenv('EMAIL_PORT') 
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') 
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
SERVER_EMAIL = DEFAULT_FROM_EMAIL